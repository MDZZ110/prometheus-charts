{{- /*
Generated from 'cluster.rules' group from https://raw.githubusercontent.com/WhizardTelemetry/kse-prometheus/kse/manifests/kubernetes/kubernetes-prometheusRule.yaml
Do not change in-place! In order to change this file first read following link:
https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack/hack
*/ -}}
{{- $kubeTargetVersion := default .Capabilities.KubeVersion.GitVersion .Values.kubeTargetVersionOverride }}
{{- if and (semverCompare ">=1.14.0-0" $kubeTargetVersion) (semverCompare "<9.9.9-9" $kubeTargetVersion) .Values.defaultRules.create .Values.defaultRules.rules.cluster }}
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  {{- if .Values.heritageNameOverride }}
  name: {{ print "cluster.rules" | replace "_" "-" | trunc 63 | trimSuffix "-" }}
  {{- else }}
  name: {{ printf "%s-%s" (include "kube-prometheus-stack.fullname" .) "cluster.rules" | trunc 63 | trimSuffix "-" }}
  {{- end }}
  namespace: {{ template "kube-prometheus-stack.namespace" . }}
  labels:
    app: {{ template "kube-prometheus-stack.name" . }}
    {{- if .Values.heritageNameOverride }}
    prometheus: {{ include "prometheus.heritageName" . }}
    {{- end }}
{{- include "kube-prometheus-stack.labels" . | indent 4 }}
{{- if .Values.defaultRules.labels }}
{{ toYaml .Values.defaultRules.labels | indent 4 }}
{{- end }}
{{- if .Values.defaultRules.annotations }}
  annotations:
{{ toYaml .Values.defaultRules.annotations | indent 4 }}
{{- end }}
spec:
  groups:
  - name: cluster.rules
    rules:
    - expr: count by(cluster) (kube_pod_info{job="kube-state-metrics"} unless on (pod, namespace, cluster) (kube_pod_status_phase{job="kube-state-metrics", phase="Succeeded"}>0) unless on (pod, namespace, cluster) ((kube_pod_status_ready{job="kube-state-metrics", condition="true"}>0) and on (pod, namespace, cluster) (kube_pod_status_phase{job="kube-state-metrics", phase="Running"}>0)) unless on (pod, namespace, cluster) kube_pod_container_status_waiting_reason{job="kube-state-metrics", reason="ContainerCreating"}>0)
      record: cluster:pod_abnormal:sum
    - expr: sum by(cluster) ((kube_pod_status_scheduled{job="kube-state-metrics", condition="true"} > 0)  * on (namespace, pod, cluster) group_left(node) (sum by (node, namespace, pod, cluster) (kube_pod_info)))
      record: cluster:pod:sum
    - expr: cluster:pod_abnormal:sum / sum by(cluster) (kube_pod_status_phase{job="kube-state-metrics", phase!="Succeeded"})
      record: cluster:pod_abnormal:ratio
    - expr: count by(cluster) (kube_pod_info{job="kube-state-metrics"} and on (pod, namespace, cluster) (kube_pod_status_phase{job="kube-state-metrics", phase="Running"}>0))
      record: cluster:pod_running:count
    - expr: cluster:pod_running:count / sum by(cluster) (kube_node_status_capacity{resource="pods", job="kube-state-metrics"})
      record: cluster:pod_utilization:ratio
    - expr: 1 - sum by(cluster) (max(node_filesystem_avail_bytes{device=~"/dev/.*", device!~"/dev/loop\\d+", job="node-exporter"}) by (device, instance, cluster)) / sum by(cluster) (max(node_filesystem_size_bytes{device=~"/dev/.*", device!~"/dev/loop\\d+", job="node-exporter"}) by (device, instance, cluster))
      record: cluster:disk_utilization:ratio
    - expr: 1 - sum by(cluster) (node:node_inodes_free:) / sum by(cluster) (node:node_inodes_total:)
      record: cluster:disk_inode_utilization:ratio
    - expr: sum by(cluster) (kube_node_status_condition{job="kube-state-metrics", condition="Ready", status=~"unknown|false"})
      record: cluster:node_offline:sum
    - expr: sum by(cluster) (kube_node_status_condition{job="kube-state-metrics", condition="Ready", status=~"unknown|false"}) / sum by(cluster) (kube_node_status_condition{job="kube-state-metrics", condition="Ready"})
      record: cluster:node_offline:ratio
{{- end }}