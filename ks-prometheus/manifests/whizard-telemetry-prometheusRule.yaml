apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    app.kubernetes.io/name: whizard-telemetry
    app.kubernetes.io/part-of: whizard-telemetry
    prometheus: k8s
    role: alert-rules
  name: whizard-telemetry-rules
  namespace: kubesphere-monitoring-system
spec:
  groups:
  - name: whizard-telemetry-cluster.rules
    rules:
    - expr: |
        max by (cluster, node, workspace, namespace, pod, qos_class, workload, workload_type, role, host_ip) (
                  kube_pod_info
                * on (cluster, namespace) group_left (workspace)
                  max by (cluster, namespace, workspace) (kube_namespace_labels{job="kube-state-metrics"})
              * on (cluster, namespace, pod) group_left (workload, workload_type)
                max by (cluster, namespace, pod, workload, workload_type) (
                    label_join(
                      label_join(
                        kube_pod_owner{job="kube-state-metrics",owner_kind!~"ReplicaSet|DaemonSet|StatefulSet|Job"},
                        "workload",
                        "$1",
                        "owner_name"
                      ),
                      "workload_type",
                      "$1",
                      "owner_kind"
                    )
                  or
                      kube_pod_owner{job="kube-state-metrics",owner_kind=~"ReplicaSet|DaemonSet|StatefulSet|Job"}
                    * on (namespace, pod) group_left (workload_type, workload)
                      namespace_workload_pod:kube_pod_owner:relabel
                )
            * on (cluster, namespace, pod) group_left (qos_class)
              max by (cluster, namespace, pod, qos_class) (
                kube_pod_status_qos_class{job="kube-state-metrics"} > 0
              )
          * on (cluster, node) group_left (role)
            max by (cluster, node, role) (
                (
                    kube_node_role{job="kube-state-metrics",role="worker"}
                  unless ignoring (role)
                    kube_node_role{job="kube-state-metrics",role="control-plane"}
                )
              or
                kube_node_role{job="kube-state-metrics",role="control-plane"}
            )
        )
      record: 'workspace_workload_node:kube_pod_info:'
  - name: whizard-telemetry-node.rules
    rules:
    - expr: |
        node:node_memory_bytes_used_total:sum / node:node_memory_bytes_total:sum
      record: node:node_memory_utilisation:ratio
    - expr: |
        node:node_memory_bytes_total:sum - node:node_memory_bytes_used_total:sum
      record: node:node_memory_bytes_available:sum
    - expr: |
        sum by (cluster, node) (
            (
                node_memory_MemTotal_bytes{job="node-exporter"}
              -
                (
                    node_memory_MemAvailable_bytes{job="node-exporter"}
                  or
                    (
                          node_memory_Buffers_bytes{job="node-exporter"} + node_memory_Cached_bytes{job="node-exporter"}
                        +
                          node_memory_MemFree_bytes{job="node-exporter"}
                      +
                        node_memory_Slab_bytes{job="node-exporter"}
                    )
                )
            )
          * on (cluster, namespace, pod) group_left (node)
            topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
        )
      record: node:node_memory_bytes_used_total:sum
    - expr: |
        sum by (cluster, node) (
            node_memory_MemTotal_bytes{job="node-exporter"}
          * on (cluster, namespace, pod) group_left (node)
            topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
        )
      record: node:node_memory_bytes_total:sum
    - expr: |
        node:node_device_filesystem_bytes_used_total:sum / node:node_device_filesystem_bytes_total:sum
      record: node:node_device_filesystem_utilisation:ratio
    - expr: |
        sum by (cluster, node, device) (
              max by (namespace, pod, instance, device) (
                  node_filesystem_avail_bytes{device=~"/dev/.*",device!~"/dev/loop\\d+", job="node-exporter"}
              )
          * on (cluster, namespace, pod) group_left (node)
            topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
        )
      record: node:node_device_filesystem_avaliable_bytes_total:sum
    - expr: |
        sum by (cluster, node, device) (
              max by (cluster, namespace, pod, instance, device) (
                  node_filesystem_size_bytes{device=~"/dev/.*",device!~"/dev/loop\\d+", job="node-exporter"}
                -
                  node_filesystem_avail_bytes{device=~"/dev/.*",device!~"/dev/loop\\d+", job="node-exporter"}
              )
          * on (cluster, namespace, pod) group_left (node)
            topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
        )
      record: node:node_device_filesystem_bytes_used_total:sum
    - expr: |
        sum by (cluster, node, device) (
              max by (cluster, namespace, pod, instance, device) (
                  node_filesystem_size_bytes{device=~"/dev/.*",device!~"/dev/loop\\d+", job="node-exporter"}
              )
          * on (cluster, namespace, pod) group_left (node)
            topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
        )
      record: node:node_device_filesystem_bytes_total:sum
    - expr: |
        node:node_filesystem_bytes_used_total:sum / node:node_filesystem_bytes_total:sum
      record: node:node_filesystem_utilisation:ratio
    - expr: |
        sum by (cluster, node)(node:node_device_filesystem_avaliable_bytes_total:sum)
      record: node:node_filesystem_avaliable_bytes_total:sum
    - expr: |
        sum by (cluster, node)(node:node_device_filesystem_used_bytes_total:sum)
      record: node:node_filesystem_bytes_used_total:sum
    - expr: |
        sum by (cluster, node)(node:node_device_filesystem_bytes_total:sum)
      record: node:node_filesystem_bytes_total:sum
    - expr: |
        node:node_pod_total:sum / node:node_pod_quota:sum
      record: node:node_pod_utilisation:ratio
    - expr: |
        sum by (cluster, node) (
            sum by (cluster, namespace, pod) (kube_pod_status_scheduled{job="kube-state-metrics"} > 0)
          * on (cluster, namespace, pod) group_left (node)
            node_namespace_pod:kube_pod_info:
        )
      record: node:node_pod_total:sum
    - expr: |
        sum by (cluster, node) (kube_node_status_allocatable{job="kube-state-metrics",resource="pods"})
      record: node:node_pod_quota:sum
    - expr: |
        count by (cluster, node) (
                  node_namespace_pod:kube_pod_info:{node!=""}
                unless on (pod, namespace, cluster,)
                  (kube_pod_status_phase{job="kube-state-metrics",phase="Succeeded"} > 0)
              unless on (pod, namespace, cluster,)
                (
                    (kube_pod_status_ready{condition="true",job="kube-state-metrics"} > 0)
                  and on (pod, namespace, cluster,)
                    (kube_pod_status_phase{job="kube-state-metrics",phase="Running"} > 0)
                )
            unless on (cluster, pod, namespace)
              kube_pod_container_status_waiting_reason{job="kube-state-metrics",reason="ContainerCreating"} > 0
        )
        /
        count by (cluster, node) (
              node_namespace_pod:kube_pod_info:{node!=""}
            unless on (pod, namespace, cluster,)
              kube_pod_status_phase{job="kube-state-metrics",phase="Succeeded"} > 0
        )
      record: node:pod_abnormal:ratio
    - expr: |
        sum by (cluster, node)(node_load1{job="node-exporter"} * on (cluster, namespace, pod) group_left (node) topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)) / node:node_num_cpu:sum
      record: node:node_load1_per_cpu:ratio
    - expr: |
        sum by (cluster, node)(node_load5{job="node-exporter"} * on (cluster, namespace, pod) group_left (node) topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)) / node:node_num_cpu:sum
      record: node:node_load5_per_cpu:ratio
    - expr: |
        sum by (cluster, node)(node_load15{job="node-exporter"} * on (cluster, namespace, pod) group_left (node) topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)) / node:node_num_cpu:sum
      record: node:node_load15_per_cpu:ratio
    - expr: |
        sum by (cluster, node) (
            sum by (cluster, instance, namespace, pod) (
              irate(node_disk_read_bytes_total{job="node-exporter"}[5m])
            )
          * on (cluster, namespace, pod) group_left (node)
            topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
        )
      record: node:data_volume_iops_reads:sum
    - expr: |
        sum by (cluster, node) (
            sum by (cluster, instance, namespace, pod) (
              irate(node_disk_writes_completed_total{job="node-exporter"}[5m])
            )
          * on (cluster, namespace, pod) group_left (node)
            topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
        )
      record: node:data_volume_iops_writes:sum
    - expr: |
        sum by (cluster, node) (
            sum by (cluster, instance, namespace, pod) (
              irate(node_disk_read_bytes_total{job="node-exporter"}[5m])
            )
          * on (cluster, namespace, pod) group_left (node)
            topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
        )
      record: node:data_volume_throughput_bytes_read:sum
    - expr: |
        sum by (cluster, node) (
            sum by (cluster, instance, namespace, pod) (
              irate(node_disk_written_bytes_total{job="node-exporter"}[5m])
            )
          * on (cluster, namespace, pod) group_left (node)
            topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
        )
      record: node:data_volume_throughput_bytes_written:sum
    - expr: |
        node:node_inodes_used_total:sum / node:node_inodes_total:sum
      record: node:node_inodes_utilisation:ratio
    - expr: |
        sum by (cluster, node) (
            sum by (cluster, instance, namespace, pod) (
              node_filesystem_files{job="node-exporter", device=~"/dev/.*",device!~"/dev/loop\\d+"}
            )
          * on (cluster, namespace, pod) group_left (node)
            topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
        )
      record: node:node_inodes_total:sum
    - expr: |
        sum by (cluster, node) (
            sum by (cluster, instance, namespace, pod) (
              node_filesystem_files{job="node-exporter", device=~"/dev/.*",device!~"/dev/loop\\d+"} - node_filesystem_files_free{job="node-exporter", device=~"/dev/.*",device!~"/dev/loop\\d+"}
            )
          * on (cluster, namespace, pod) group_left (node)
            topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
        )
      record: node:node_inodes_used_total:sum
    - expr: |
        sum by (cluster, node) (
            sum by (cluster, instance, namespace, pod) (
              irate(node_network_transmit_bytes_total{job="node-exporter", device!~"veth.+"}[5m])
            )
          * on (cluster, namespace, pod) group_left (node)
            topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
        )
      record: node:node_net_bytes_transmitted:sum_irate
    - expr: |
        sum by (cluster, node) (
            sum by (cluster, instance, namespace, pod) (
              irate(node_network_receive_bytes_total{job="node-exporter", device!~"veth.+"}[5m])
            )
          * on (cluster, namespace, pod) group_left (node)
            topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:)
        )
      record: node:node_net_bytes_received:sum_irate
  - name: whizard-telemetry-namespace.rules
    rules:
    - expr: |
        sum by (cluster, namespace, workload, workload_type) (
            sum by (cluster, namespace, pod) (
              node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate
            )
          * on (cluster, namespace, pod) group_left (workload, workload_type)
            workspace_workload_node:kube_pod_info:
        )
      record: namespace:workload_cpu_usage:sum
    - expr: |
        sum by (cluster, namespace, workload, workload_type) (
            sum by (cluster, namespace, pod) (
              container_memory_usage_bytes{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}
            )
          * on (cluster, namespace, pod) group_left (workload, workload_type)
            workspace_workload_node:kube_pod_info:
        )
      record: namespace:workload_memory_usage:sum
    - expr: |
        sum by (cluster, namespace, workload, workload_type) (
            sum by (cluster, namespace, pod) (
              node_namespace_pod_container:container_memory_working_set_bytes
            )
          * on (cluster, namespace, pod) group_left (workload, workload_type)
            workspace_workload_node:kube_pod_info:
        )
      record: namespace:workload_memory_wo_cache_usage:sum
    - expr: |
        sum by (cluster, namespace, workload, workload_type) (
            sum by (cluster, namespace, pod) (
              irate(container_network_receive_bytes_total{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}[5m])
            )
          * on (cluster, namespace, pod) group_left (workload, workload_type)
            workspace_workload_node:kube_pod_info:
        )
      record: namespace:workload_net_bytes_received:sum_irate
    - expr: |
        sum by (cluster, namespace, workload, workload_type) (
            sum by (cluster, namespace, pod) (
              irate(container_network_transmit_bytes_total{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}[5m])
            )
          * on (cluster, namespace, pod) group_left (workload, workload_type)
            workspace_workload_node:kube_pod_info:
        )
      record: namespace:workload_net_bytes_transmitted:sum_irate
    - expr: |
        label_replace(sum(kube_daemonset_status_number_unavailable{job="kube-state-metrics"}) by (daemonset, namespace, cluster) / sum(kube_daemonset_status_desired_number_scheduled{job="kube-state-metrics"}) by (daemonset, namespace,cluster), "workload", "$1", "daemonset", "(.*)")
      labels:
        workload_type: daemonset
      record: namespace:workload_unavailable_replicas:ratio
    - expr: |
        label_replace(sum(kube_deployment_status_replicas_unavailable{job="kube-state-metrics"}) by (deployment, namespace, cluster) / sum(kube_deployment_spec_replicas{job="kube-state-metrics"}) by (deployment, namespace, cluster), "workload", "$1", "deployment", "(.*)")
      labels:
        workload_type: deployment
      record: namespace:workload_unavailable_replicas:ratio
    - expr: |
        label_replace(1 - sum(kube_statefulset_status_replicas_ready{job="kube-state-metrics"}) by (statefulset, namespace, cluster) / sum(kube_statefulset_status_replicas{job="kube-state-metrics"}) by (statefulset, namespace, cluster), "workload", "$1", "statefulset", "(.*)")
      labels:
        workload_type: statefulset
      record: namespace:workload_unavailable_replicas:ratio
  - name: whizard-telemetry-apiserver.rules
    rules:
    - expr: |
        sum by(cluster) (irate(apiserver_request_total{job="apiserver"}[5m]))
      record: apiserver:apiserver_request_total:sum_irate
    - expr: |
        sum by (cluster, verb)(irate(apiserver_request_total{job="apiserver"}[5m]))
      record: apiserver:apiserver_request_total:sum_verb_irate
    - expr: |
        sum by(cluster) (irate(apiserver_request_duration_seconds_sum{job="apiserver",subresource!="log", verb!~"LIST|WATCH|WATCHLIST|PROXY|CONNECT"}[5m])) / sum by(cluster) (irate(apiserver_request_duration_seconds_count{job="apiserver", subresource!="log",verb!~"LIST|WATCH|WATCHLIST|PROXY|CONNECT"}[5m]))
      record: apiserver:apiserver_request_duration:avg
    - expr: "sum by (cluster, verb)(irate(apiserver_request_duration_seconds_sum{job=\"apiserver\",subresource!=\"log\", verb!~\"LIST|WATCH|WATCHLIST|PROXY|CONNECT\"}[5m]))  / sum by (cluster, verb)(irate(apiserver_request_duration_seconds_count{job=\"apiserver\", subresource!=\"log\",verb!~\"LIST|WATCH|WATCHLIST|PROXY|CONNECT\"}[5m])) \n"
      record: apiserver:apiserver_request_duration:avg_by_verb
